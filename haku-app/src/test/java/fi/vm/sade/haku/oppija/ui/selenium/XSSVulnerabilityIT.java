/*
 * Copyright (c) 2013 The Finnish Board of Education - Opetushallitus
 *
 * This program is free software:  Licensed under the EUPL, Version 1.1 or - as
 * soon as they will be approved by the European Commission - subsequent versions
 * of the EUPL (the "Licence");
 *
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: http://www.osor.eu/eupl/
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * European Union Public Licence for more details.
 */

package fi.vm.sade.haku.oppija.ui.selenium;

import com.thoughtworks.selenium.Selenium;
import fi.vm.sade.haku.oppija.common.selenium.AbstractSeleniumBase;
import fi.vm.sade.haku.oppija.lomake.ApplicationSystemHelper;
import fi.vm.sade.haku.oppija.lomake.domain.ApplicationSystem;
import fi.vm.sade.haku.oppija.lomake.domain.elements.Form;
import fi.vm.sade.haku.oppija.lomake.domain.elements.Phase;
import fi.vm.sade.haku.oppija.lomake.domain.elements.Theme;
import fi.vm.sade.haku.oppija.lomake.domain.elements.questions.TextQuestion;
import fi.vm.sade.haku.virkailija.lomakkeenhallinta.util.ElementUtil;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import static com.mongodb.util.MyAsserts.assertFalse;
import static fi.vm.sade.haku.virkailija.lomakkeenhallinta.util.ElementUtil.createI18NAsIs;
import static org.junit.Assert.assertTrue;

/**
 * @author Mikko Majapuro
 */
public class XSSVulnerabilityIT extends AbstractSeleniumBase {

    protected WebDriver driver;
    protected Selenium selenium;
    private ApplicationSystemHelper applicationSystemHelper;

    @Before
    public void init() {
        Form form = new Form("lomake", createI18NAsIs("yhteishaku"));
        ApplicationSystem applicationSystem = ElementUtil.createActiveApplicationSystem("test", form);
        Phase testivaihe = new Phase("testivaihe", createI18NAsIs("Testivaihe"), false);
        Phase testivaihe2 = new Phase("testivaihe2", createI18NAsIs("Testivaihe2"), false);
        form.addChild(testivaihe);
        form.addChild(testivaihe2);
        Theme testiRyhma = new Theme("testiGrp", createI18NAsIs("TestiGrp"), true);
        testivaihe.addChild(testiRyhma);

        TextQuestion tq = new TextQuestion("foo", createI18NAsIs("bar"));
        testiRyhma.addChild(tq);
        this.applicationSystemHelper = updateApplicationSystem(applicationSystem);

        driver = seleniumContainer.getDriver();
        selenium = seleniumContainer.getSelenium();
        driver.get(getBaseUrl() + applicationSystemHelper.getStartUrl());
    }

    @Test
    public void testValidInput() {
        selenium.type("foo", "bar");
        driver.findElement(new By.ByClassName("right")).click();
        assertTrue(driver.getCurrentUrl().contains("testivaihe2"));
    }

    @Test
    public void testScriptInput() {
        selenium.type("foo", "<script>alert('bar');</script>");
        driver.findElement(new By.ByClassName("right")).click();
        assertFalse(driver.getCurrentUrl().contains("testivaihe2"));
        assertTrue(driver.getPageSource().contains("XSS"));
    }

    @Test
    public void testHTMLInput() {
        selenium.type("foo", "<p>bar</p>");
        driver.findElement(new By.ByClassName("right")).click();
        assertFalse(driver.getCurrentUrl().contains("testivaihe2"));
        assertTrue(driver.getPageSource().contains("XSS"));
    }
}
